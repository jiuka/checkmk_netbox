#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-License
#
# Copyright (C) 2023  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import logging
import requests
from functools import cached_property

from cmk.special_agents.utils.agent_common import (
    special_agent_main,
)
from cmk.special_agents.utils.argument_parsing import (
    Args,
    create_default_argument_parser,
)

import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

LOGGING = logging.getLogger('agent_netbox')

class AgentNetbox:
    '''Checkmk special Agent for Netbox'''

    def run(self):
        special_agent_main(self.parse_arguments, self.main)

    def parse_arguments(self, argv):
        parser = create_default_argument_parser(description=self.__doc__)

        parser.add_argument('-U', '--url',
                            dest='url',
                            required=True,
                            help='Rest API URL of the Netbox. (Example https://netbox.example.com/api)')
        parser.add_argument('-T', '--token',
                            dest='token',
                            required=True,
                            help='Netbox token.')
        parser.add_argument('-t', '--timeout',
                            dest='timeout',
                            required=False,
                            default=10,
                            help='HTTP connection timeout. (Default: 10)')

        return parser.parse_args(argv)

    def main(self, args: Args):
        self.args = args

        self.section_reports()

    def section_reports(self):
        print('<<<netbox_reports:sep(44)>>>')
        for report in self.get_reports():
            detail = self.get_report_detail(report)
            for test_name in report['test_methods']:
                if detail['data'] is None or test_name not in detail['data']:
                    print(",".join([
                        report['id'],
                        report['name'],
                        test_name,
                    ]))
                else:
                    data = detail['data'][test_name]
                    print(",".join([
                        report['id'],
                        report['name'],
                        test_name,
                        detail['completed'] ,
                        str(data['info']),
                        str(data['success']),
                        str(data['warning']),
                        str(data['failure']),
                    ]))


    def get_reports(self):
        response = self.client.get('{}/extras/reports/'.format(self.args.url), timeout=self.args.timeout)
        return response.json()

    def get_report_detail(self, report):
        if report['result'] is None:
            return dict(data=None)
        response = self.client.get(report['result']['url'], timeout=self.args.timeout)
        return response.json()

    @cached_property
    def client(self):
        c = requests.Session()
        c.headers.update({
            'Accept': 'application/json',
            'Authorization': 'Token {}'.format(self.args.token)
        })
        return c

if __name__ == '__main__':
    AgentNetbox().run()